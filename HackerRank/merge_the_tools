# Consider the following:
#
# A string, , of length  where .
# An integer, , where  is a factor of .
# We can split  into  subsegments where each subsegment, , consists of a contiguous block of  characters in . Then, use each  to create string  such that:
#
# The characters in  are a subsequence of the characters in .
# Any repeat occurrence of a character is removed from the string such that each character in  occurs exactly once. In other words, if the character at some index  in  occurs at a previous index  in , then do not include the character in string .
# Given  and , print  lines where each line  denotes string .
#
# Input Format
#
# The first line contains a single string denoting .
# The second line contains an integer, , denoting the length of each subsegment.
#
# Constraints
#
# , where  is the length of
# It is guaranteed that  is a multiple of .
# Output Format
#
# Print  lines where each line  contains string .
#
# Sample Input
#
# AABCAAADA
# 3
# Sample Output
#
# AB
# CA
# AD

input_string = "AABCAAADA"
k = 3


def get_slice(input_string, k):
    for i in range(len(input_string)):
        yield input_string[i*k:i*k+k]


result = []
# set is not suitable, since ordering is required
for slice in get_slice(input_string, k):
    i = 0
    uniques = ''
    while i < len(slice):
        if not slice[i] in uniques:
            uniques += slice[i]
            while i < len(slice) - 1:
                if slice[i] == slice[i+1]:
                    i += 1
                else:
                    break
        i += 1
    print(uniques)
